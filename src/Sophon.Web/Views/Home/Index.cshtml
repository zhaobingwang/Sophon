@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
    <div class="col-6" id="main" style="width:400px;height:300px;"></div>

    <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->
    <div class="col-6" id="ar" style="width:400px;height:300px;"></div>
</div>

<div class="row">
    <div class="col-12" id="log-chart" style="width:800px;height:500px;"></div>
</div>

<div class="row">
    <div class="col-12" id="log-chart-2" style="width:800px;height:500px;"></div>
</div>


<div class="row">&nbsp;</div>
<div class="row">
    <div class="col-2">User</div>
    <div class="col-4"><input type="text" id="userInput" /></div>
</div>
<div class="row">
    <div class="col-2">Message</div>
    <div class="col-4"><input type="text" id="messageInput" /></div>
</div>
<div class="row">&nbsp;</div>
<div class="row">
    <div class="col-6">
        <input type="button" id="sendButton" value="Send Message" />
    </div>
</div>

<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>




@section Scripts{
    <script src="~/lib/echarts/dist/echarts.min.js"></script>
    <script type="text/javascript">
        $(function () {
            init();
            initAssetRecords();
            initLogChart();
            initLogChart2();
            hubMessage();
        });
        function init() {
            // 基于准备好的dom，初始化echarts实例
            var myChart = echarts.init(document.getElementById('main'));

            // 指定图表的配置项和数据
            myChart.setOption({
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)'
                },
                legend: {
                    orient: 'vertical',
                    left: 10,
                    data: []
                },
                series: [
                    {
                        name: '访问来源',
                        type: 'pie',
                        radius: ['50%', '70%'],
                        avoidLabelOverlap: false,
                        label: {
                            show: false,
                            position: 'center'
                        },
                        emphasis: {
                            label: {
                                show: true,
                                fontSize: '30',
                                fontWeight: 'bold'
                            }
                        },
                        labelLine: {
                            show: false
                        },
                        data: [
                        ]
                    }
                ]
            });
            myChart.showLoading();
            $.ajax({
                type: "GET",
                async: true,
                url: "api/statistics/total",
                dataType: "json",
                success: function (result) {
                    myChart.hideLoading();
                    myChart.setOption({
                        legend: {
                            orient: 'vertical',
                            left: 10,
                            data: result.legend
                        },
                        series: [
                            {
                                name: '访问来源',
                                type: 'pie',
                                radius: ['50%', '70%'],
                                avoidLabelOverlap: false,
                                label: {
                                    show: false,
                                    position: 'center'
                                },
                                emphasis: {
                                    label: {
                                        show: true,
                                        fontSize: '30',
                                        fontWeight: 'bold'
                                    }
                                },
                                labelLine: {
                                    show: false
                                },
                                data: result.series
                            }
                        ]
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(XMLHttpRequest.responseText);

                }
            });
        }

        function initAssetRecords() {
            // 基于准备好的dom，初始化echarts实例
            var myChart = echarts.init(document.getElementById('ar'));

            // 指定图表的配置项和数据
            myChart.setOption({
                title: {
                },
                tooltip: {
                    trigger: 'axis'
                },
                legend: {
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                },
                xAxis: {
                },
                yAxis: {
                    type: 'value'
                },
                series: []
            });
            myChart.showLoading();
            $.ajax({
                type: "GET",
                async: true,
                url: "api/statistics/ar",
                dataType: "json",
                success: function (result) {
                    myChart.hideLoading();
                    myChart.setOption({
                        title: result.title,
                        legend: result.legend,
                        xAxis: result.xAxis,
                        series: result.series,
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(XMLHttpRequest.responseText);

                }
            });
        }

        function initLogChart() {
            // 基于准备好的dom，初始化echarts实例
            var myChart = echarts.init(document.getElementById('log-chart'));

            // 指定图表的配置项和数据
            myChart.setOption({
                legend: {},
                tooltip: {
                    trigger: 'axis',
                    showContent: false
                },
                dataset: {
                    source: []
                },
                xAxis: { type: 'category' },
                yAxis: { gridIndex: 0 },
                grid: { top: '55%' },
                series: [
                    { type: 'line', smooth: true, seriesLayoutBy: 'row' },
                    { type: 'line', smooth: true, seriesLayoutBy: 'row' },
                    { type: 'line', smooth: true, seriesLayoutBy: 'row' },
                    { type: 'line', smooth: true, seriesLayoutBy: 'row' },
                    {
                        type: 'pie',
                        id: 'pie',
                        radius: '30%',
                        center: ['50%', '25%'],
                        label: {
                            formatter: '{b}: {@@2012} ({d}%)'
                        },
                        encode: {
                            itemName: 'product',
                            value: '2012',
                            tooltip: '2012'
                        }
                    }
                ]
            });

            myChart.on('updateAxisPointer', function (event) {
                var xAxisInfo = event.axesInfo[0];
                if (xAxisInfo) {
                    var dimension = xAxisInfo.value + 1;
                    myChart.setOption({
                        series: {
                            id: 'pie',
                            label: {
                                formatter: '{b}: {@@[' + dimension + ']} ({d}%)'
                            },
                            encode: {
                                value: dimension,
                                tooltip: dimension
                            }
                        }
                    });
                }
            });

            myChart.showLoading();
            $.ajax({
                type: "GET",
                async: true,
                url: "api/log/statistics/today",
                dataType: "json",
                success: function (result) {
                    myChart.hideLoading();
                    var series = [];
                    for (var i = 0; i < result.source.length - 1; i++) {
                        series.push({ type: 'line', smooth: true, seriesLayoutBy: 'row' });
                    }
                    console.log(result.source[0][1]);
                    series.push({
                        type: 'pie',
                        id: 'pie',
                        radius: '30%',
                        center: ['50%', '25%'],
                        label: {
                            formatter: '{b}: {@@' + result.source[0][1] + '} ({d}%)'
                        },
                        encode: {
                            itemName: 'Level',
                            value: result.source[0][1],
                            tooltip: result.source[0][1]
                        }
                    })
                    myChart.setOption({
                        dataset: {
                            source: result.source,
                        },
                        series: series
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(XMLHttpRequest.responseText);

                }
            });
        }

        function initLogChart2() {
            // 基于准备好的dom，初始化echarts实例
            var myChart = echarts.init(document.getElementById('log-chart-2'));

            // 指定图表的配置项和数据
            myChart.setOption({
                legend: {},
                tooltip: {},
                dataset: {
                    source: []
                },
                xAxis: [
                    { type: 'category', gridIndex: 0 },
                    //{ type: 'category', gridIndex: 1 }
                ],
                yAxis: [
                    { gridIndex: 0 },
                    //{ gridIndex: 1 }
                ],
                grid: [
                    { bottom: '55%' },
                    { top: '55%' }
                ],
                series: [

                ]
            });
            myChart.showLoading();
            $.ajax({
                type: "GET",
                async: true,
                url: "api/log/statistics/today",
                dataType: "json",
                success: function (result) {
                    myChart.hideLoading();
                    var series = [];
                    for (var i = 0; i < result.source.length; i++) {
                        series.push({ type: 'bar', seriesLayoutBy: 'row' },);
                    }
                    myChart.setOption({
                        dataset: {
                            source: result.source,
                        },
                        series: series
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(XMLHttpRequest.responseText);

                }
            });
        }

        function hubMessage() {
            //var connection = new signalR.HubConnectionBuilder().withUrl("/testHub").build();
            var connection = new signalR.HubConnectionBuilder().withUrl("/notificationHub").build();

            //Disable send button until connection is established
            document.getElementById("sendButton").disabled = true;

            //connection.on("ReceiveMessage", function (message) {
            connection.on("Notify", function (message) {
                //var msg = message.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                //var encodedMsg = msg;
                var li = document.createElement("li");
                //li.textContent = encodedMsg;
                li.textContent = message;
                document.getElementById("messagesList").appendChild(li);
            });

            connection.start().then(function () {
                document.getElementById("sendButton").disabled = false;
            }).catch(function (err) {
                return console.error(err.toString());
            });

            document.getElementById("sendButton").addEventListener("click", function (event) {
                //var user = document.getElementById("userInput").value;
                var message = document.getElementById("messageInput").value;
                connection.invoke("PushMessage", message).catch(function (err) {
                    return console.error(err.toString());
                });
                event.preventDefault();
            });
        }
    </script>
}